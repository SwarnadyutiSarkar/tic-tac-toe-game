import tkinter as tk
from tkinter import messagebox
import random

class TicTacToeGame:
    def __init__(self):
        self.board = [' ' for _ in range(9)]
        self.current_player = 'X'
    
    def make_move(self, position):
        if self.board[position] == ' ':
            self.board[position] = self.current_player
            return True
        return False

    def check_for_win(self):
        win_conditions = [
            (0, 1, 2), (3, 4, 5), (6, 7, 8),  # Rows
            (0, 3, 6), (1, 4, 7), (2, 5, 8),  # Columns
            (0, 4, 8), (2, 4, 6)               # Diagonals
        ]
        for a, b, c in win_conditions:
            if self.board[a] == self.board[b] == self.board[c] and self.board[a] != ' ':
                return True
        return False

    def is_board_full(self):
        return ' ' not in self.board

    def switch_player(self):
        self.current_player = 'O' if self.current_player == 'X' else 'X'

    def get_computer_move(self):
        available_moves = [i for i, x in enumerate(self.board) if x == ' ']
        return random.choice(available_moves) if available_moves else None


class TicTacToeGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Tic-Tac-Toe")
        self.game = TicTacToeGame()
        self.buttons = [tk.Button(self.master, text=' ', font=('Arial', 20), width=5, height=2,
                                  command=lambda i=i: self.on_button_click(i)) for i in range(9)]
        self.create_widgets()

    def create_widgets(self):
        for i, button in enumerate(self.buttons):
            row = i // 3
            col = i % 3
            button.grid(row=row, column=col)
        self.update_status()

    def on_button_click(self, position):
        if self.game.make_move(position):
            self.update_board()
            if self.game.check_for_win():
                self.end_game(f"Player {self.game.current_player} wins!")
            elif self.game.is_board_full():
                self.end_game("It's a draw!")
            else:
                self.game.switch_player()
                self.computer_move()

    def update_board(self):
        for i, button in enumerate(self.game.board):
            self.buttons[i].config(text=button)

    def computer_move(self):
        move = self.game.get_computer_move()
        if move is not None:
            self.game.make_move(move)
            self.update_board()
            if self.game.check_for_win():
                self.end_game("Computer wins!")
            elif self.game.is_board_full():
                self.end_game("It's a draw!")

    def end_game(self, message):
        messagebox.showinfo("Game Over", message)
        self.master.after(2000, self.reset_game)

    def reset_game(self):
        self.game = TicTacToeGame()
        self.update_board()

def main():
    root = tk.Tk()
    game = TicTacToeGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
